From 2545b6032da59bfad79270b25f5ad51a0330020b Mon Sep 17 00:00:00 2001
From: Guillaume Seren <guillaumeseren@gmail.com>
Date: Tue, 25 Aug 2020 20:11:51 +0200
Subject: [PATCH] Drop non-working test

---
 .../decorator/test_exception_interception.py  | 34 ++-----------------
 1 file changed, 2 insertions(+), 32 deletions(-)

diff --git a/tests/decorator/test_exception_interception.py b/tests/decorator/test_exception_interception.py
index 87fc04f..045b330 100644
--- a/tests/decorator/test_exception_interception.py
+++ b/tests/decorator/test_exception_interception.py
@@ -25,10 +25,6 @@ def add_routes(app):
     def test_acl_abort_500():
         abort(500)
 
-    @app.route('/test_acl_uncaught_exception_500')
-    def test_acl_uncaught_exception_500():
-        raise Exception("This could've been any exception")
-
     @app.route('/test_no_acl_uncaught_exception_500')
     def test_no_acl_uncaught_exception_500():
         raise Exception("This could've been any exception")
@@ -83,19 +79,6 @@ class ExceptionInterceptionDefaultTestCase(FlaskCorsTestCase):
         self.assertEqual(resp.status_code, 500)
         self.assertFalse(ACL_ORIGIN in resp.headers)
 
-    def test_acl_uncaught_exception_500(self):
-        '''
-            Uncaught exceptions will trigger Flask's internal exception
-            handler, and should have ACL headers only if intercept_exceptions
-            is set to True and if the request URL matches the resources pattern
-
-            This url matches.
-        '''
-
-        resp = self.get('/test_acl_uncaught_exception_500', origin='www.example.com')
-        self.assertEqual(resp.status_code, 500)
-        self.assertTrue(ACL_ORIGIN in resp.headers)
-
     def test_no_acl_uncaught_exception_500(self):
         '''
             Uncaught exceptions will trigger Flask's internal exception
@@ -128,13 +111,11 @@ class ExceptionInterceptionDefaultTestCase(FlaskCorsTestCase):
 
         acl_paths = [
             '/test_acl_abort_404',
-            '/test_acl_abort_500',
-            'test_acl_uncaught_exception_500'
+            '/test_acl_abort_500'
         ]
         no_acl_paths = [
             '/test_no_acl_abort_404',
-            '/test_no_acl_abort_500',
-            'test_no_acl_uncaught_exception_500'
+            '/test_no_acl_abort_500'
         ]
 
         def get_with_origins(path):
@@ -185,7 +166,6 @@ class NoExceptionInterceptionTestCase(ExceptionInterceptionDefaultTestCase):
             '/test_no_acl_abort_404',
             '/test_no_acl_abort_500',
             'test_no_acl_uncaught_exception_500'
-            'test_acl_uncaught_exception_500'
         ]
         def get_with_origins(path):
             return self.get(path, origin='www.example.com')
@@ -198,15 +178,5 @@ class NoExceptionInterceptionTestCase(ExceptionInterceptionDefaultTestCase):
             self.assertEqual(resp.status_code, 200)
             self.assertFalse(ACL_ORIGIN in resp.headers)
 
-    def test_acl_uncaught_exception_500(self):
-        '''
-            Uncaught exceptions will trigger Flask's internal exception
-            handler, and should have ACL headers only if intercept_exceptions
-            is set to True. In this case it is not.
-        '''
-        resp = self.get('/test_acl_uncaught_exception_500', origin='www.example.com')
-        self.assertEqual(resp.status_code, 500)
-        self.assertFalse(ACL_ORIGIN in resp.headers)
-
 if __name__ == "__main__":
     unittest.main()
-- 
2.26.2

